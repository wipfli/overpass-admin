{"version":3,"sources":["Map.js","Select.js","App.js","index.js"],"names":["Map","viewportWidth","viewportHeight","centerLongitude","centerLatitude","shareMap","useState","zoom","setZoom","map","setMap","mapContainerRef","useRef","useEffect","maplibregl","container","current","style","center","attributionControl","scale","ScaleControl","maxWidth","unit","addControl","dragRotate","disable","touchZoomRotate","disableRotation","on","getZoom","resize","ref","position","width","height","overflow","right","top","padding","Box","display","flexDirection","Tooltip","title","placement","IconButton","onClick","bottom","justifyContent","mx","color","Typography","fontSize","Link","href","Select","layer","setLayer","layers","setLayers","axios","get","then","res","data","catch","err","console","log","getQueryUrl","getBounds","toArray","longitude0","latitude0","longitude1","latitude1","buildUrl","queryParams","left","m","p","Paper","FormControl","InputLabel","value","onChange","e","target","layerName","index","MenuItem","toString","my","Button","variant","getSource","setData","addSource","type","addLayer","window","open","App","innerHeight","setViewportHeight","innerWidth","setViewportWidth","handleResize","document","getElementById","clientWidth","addEventListener","removeEventListener","ReactDOM","render"],"mappings":"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","file":"static/js/main.48e6bbb2.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\n\r\nimport maplibregl from 'maplibre-gl'\r\nimport 'maplibre-gl/dist/maplibre-gl.css'\r\n\r\nimport { IconButton, Typography } from '@material-ui/core'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport RemoveIcon from '@material-ui/icons/Remove'\r\nimport Box from '@material-ui/core/Box'\r\nimport Link from '@material-ui/core/Link'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\n\r\nconst Map = ({\r\n    viewportWidth,\r\n    viewportHeight,\r\n    centerLongitude,\r\n    centerLatitude,\r\n    shareMap,\r\n}) => {\r\n\r\n    const [zoom, setZoom] = useState(8)\r\n    const [map, setMap] = useState(null)\r\n    const mapContainerRef = useRef(null)\r\n\r\n    const zoomIn = () => {\r\n        if (map) {\r\n            map.setZoom(zoom + 1)\r\n            setZoom(zoom + 1)\r\n        }\r\n    }\r\n\r\n    const zoomOut = () => {\r\n        if (map) {\r\n            map.setZoom(zoom - 1)\r\n            setZoom(zoom - 1)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const map = new maplibregl.Map({\r\n            container: mapContainerRef.current,\r\n            style: 'https://vectortiles.geo.admin.ch/styles/ch.swisstopo.leichte-basiskarte.vt/style.json',\r\n            center: [centerLongitude, centerLatitude],\r\n            zoom: zoom,\r\n            attributionControl: false\r\n        })\r\n\r\n        const scale = new maplibregl.ScaleControl({\r\n            maxWidth: 80,\r\n            unit: 'metric'\r\n        })\r\n        map.addControl(scale)\r\n\r\n        map.dragRotate.disable()\r\n        map.touchZoomRotate.disableRotation()\r\n\r\n        map.on('move', () => {\r\n            setZoom(map.getZoom())\r\n        })\r\n\r\n        map.on('load', () => {\r\n            map.resize()\r\n        })\r\n\r\n        setMap(map)\r\n        shareMap(map)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (map) {\r\n            map.resize()\r\n        }\r\n    }, [viewportWidth, viewportHeight])\r\n\r\n    return (\r\n        <div>\r\n            <div\r\n                ref={mapContainerRef}\r\n                style={{\r\n                    position: 'absolute',\r\n                    width: (viewportWidth - 1),\r\n                    height: (viewportHeight - 1),\r\n                    overflow: 'hidden'\r\n                }}\r\n            />\r\n\r\n            <div style={{\r\n                position: 'absolute',\r\n                right: 0,\r\n                top: 0,\r\n                padding: 10\r\n            }}>\r\n                <Box display=\"flex\" flexDirection=\"column\">\r\n                    <Tooltip title=\"Zoom In\" placement=\"left\">\r\n                        <IconButton onClick={zoomIn}>\r\n                            <AddIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Zoom Out\" placement=\"left\">\r\n                        <IconButton onClick={zoomOut}>\r\n                            <RemoveIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                </Box>\r\n            </div>\r\n\r\n            <div style={{\r\n                position: 'absolute',\r\n                right: 0,\r\n                bottom: 0\r\n            }}>\r\n                <Box display=\"flex\" justifyContent=\"flex-end\" mx={1} color=\"text.secondary\">\r\n                    <Typography style={{ fontSize: 12 }}>\r\n                        <Link color=\"inherit\" href=\"https://www.geo.admin.ch/\">Â©swisstopo </Link>\r\n                    </Typography>\r\n                </Box>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Map","import React, { useState, useEffect } from 'react';\r\n\r\nimport axios from 'axios'\r\nimport buildUrl from 'build-url'\r\n\r\nimport Box from '@material-ui/core/Box'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport MaterialUISelect from '@material-ui/core/Select'\r\nimport Button from '@material-ui/core/Button'\r\nimport Paper from '@material-ui/core/Paper'\r\n\r\nconst Select = ({ map }) => {\r\n    const [layer, setLayer] = useState('loading...')\r\n    const [layers, setLayers] = useState(['loading...'])\r\n\r\n    const handleChange = e => {\r\n        setLayer(e.target.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        axios.get('/layers')\r\n            .then(res => {\r\n                setLayers(res.data)\r\n                setLayer(res.data[0])\r\n            })\r\n            .catch(err => console.log(err))\r\n    }, [])\r\n\r\n    const getQueryUrl = () => {\r\n        if (!map) {\r\n            return ''\r\n        }\r\n        const [\r\n            [\r\n                longitude0,\r\n                latitude0\r\n            ],\r\n            [\r\n                longitude1,\r\n                latitude1\r\n            ]\r\n        ] = map.getBounds().toArray()\r\n        const url = buildUrl('/query', {\r\n            queryParams: {\r\n                layer: layer,\r\n                longitude0: longitude0,\r\n                latitude0: latitude0,\r\n                longitude1: longitude1,\r\n                latitude1: latitude1,\r\n            }\r\n        })\r\n        return url\r\n    }\r\n\r\n    const load = () => {\r\n        \r\n        axios.get(getQueryUrl())\r\n            .then(res => {\r\n                if (!map.getSource('my-overlay')) {\r\n                    map.addSource('my-overlay', {\r\n                        type: 'geojson',\r\n                        data: res.data,\r\n                    })\r\n                    map.addLayer({\r\n                        'id': 'my-overlay',\r\n                        'source': 'my-overlay',\r\n                        'type': 'fill',\r\n                        'paint': {\r\n                            'fill-color': '#a61662',\r\n                            'fill-opacity': 0.5\r\n                        }\r\n                    })\r\n                }\r\n                else {\r\n                    map.getSource('my-overlay').setData(res.data)\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            position: 'absolute',\r\n            left: 0,\r\n            top: 0\r\n        }}>\r\n            <Box m={1} p={1}>\r\n\r\n                <Paper>\r\n                    <Box m={1} p={1}>\r\n                        <FormControl>\r\n                            <InputLabel>Layer</InputLabel>\r\n                            <MaterialUISelect\r\n                                value={layer}\r\n                                onChange={handleChange}\r\n                            >\r\n                                {layers.map((layerName, index) => {\r\n                                    return <MenuItem value={layerName} key={index.toString()}>{layerName}</MenuItem>\r\n                                })}\r\n                            </MaterialUISelect>\r\n                        </FormControl>\r\n\r\n                    </Box>\r\n                </Paper>\r\n                <Box my={1} display=\"flex\" flexDirection=\"row\">\r\n                    <Box>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={load}>\r\n                            Show\r\n                        </Button>\r\n                    </Box>\r\n                    <Box mx={1}>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={() => {\r\n                            window.open(getQueryUrl())\r\n                        }}>\r\n                            Download\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Select","import React, { useState, useEffect } from 'react'\r\n\r\nimport Map from './Map'\r\nimport Select from './Select'\r\n\r\nconst App = () => {\r\n\r\n    const [viewportHeight, setViewportHeight] = useState(window.innerHeight)\r\n    const [viewportWidth, setViewportWidth] = useState(window.innerWidth)\r\n    const [map, setMap] = useState(null)\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setViewportHeight(window.innerHeight)\r\n            setViewportWidth(document.getElementById('root').clientWidth)\r\n        }\r\n        window.addEventListener('resize', handleResize)\r\n        handleResize()\r\n        return () => window.removeEventListener('resize', handleResize)\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Map\r\n                viewportWidth={viewportWidth}\r\n                viewportHeight={viewportHeight}\r\n                centerLongitude={8.55301}\r\n                centerLatitude={47.35257}\r\n                shareMap={setMap}\r\n            />\r\n            <Select map={map} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport App from './App'\r\n\r\nReactDOM.render((\r\n  <App />\r\n), document.getElementById('root'))\r\n"],"sourceRoot":""}